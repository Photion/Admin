name: test-and-build

on: [push]

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install

      - name: Run Unit Tests
        run: yarn test:unit
        env:
          COVERAGE: true
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  feat-tests:
    name: Run Feature Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}


      - name: Run Feature Tests
        run: yarn test:feat
        env:
          CI: true

  build:
    name: Build
    runs-on: ubuntu-16.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Restore node_modules cache
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install

      - name: Build
        run: yarn build --modern
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_UPLOAD_SOURCE_MAPS: true
          VUE_APP_SENTRY_DSN: ${{ secrets.VUE_APP_SENTRY_DSN }}

      - name: Upload dist folder
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  e2e-tests:
    name: Run E2E Tests
    needs: [build]
    runs-on: ubuntu-16.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download dist folder
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Publish on Netlify (preview)
        run: |
          yarn global add netlify-cli
          netlify --telemetry-disable
          netlify deploy --dir=dist --alias ${{ github.sha }} --message='${{ github.sha }}::${{ github.actor }}::${{ github.ref }}'
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: Run E2E Tests
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
        env:
          CYPRESS_BASE_URL: 'https://${{ github.sha }}--photion.netlify.app'

      - name: Upload cypress videos folder
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress-videos
          path: cypress/videos

      - name: Upload cypress screenshots folder
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress-screenshots
          path: cypress/screenshots


  publish-netlify:
    name: Publish on Netlify (production)
    if: github.ref == 'refs/heads/master'
    needs: [build, unit-tests, feat-tests, e2e-tests]
    runs-on: ubuntu-16.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download dist folder
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Publish on Netlify (production)
        run: |
          yarn global add netlify-cli
          netlify --telemetry-disable
          netlify deploy --dir=dist --prod --message='${{ github.sha }}::${{ github.actor }}'
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
